/************************************************************************************
*  _____   ____    _   _  ____ _______   ______ _____ _____ _______ 
* |  __ \ / __ \  | \ | |/ __ \__   __| |  ____|  __ \_   _|__   __|
* | |  | | |  | | |  \| | |  | | | |    | |__  | |  | || |    | |   
* | |  | | |  | | | . ` | |  | | | |    |  __| | |  | || |    | |   
* | |__| | |__| | | |\  | |__| | | |    | |____| |__| || |_   | |   
* |_____/ \____/  |_| \_|\____/  |_|    |______|_____/_____|  |_|   
*                    
* The code contained below controls the timing of DTM activity relative to your web
* application. Please contact your Adobe technical consultant to make any changes to
* this portion of the code, unless you're REALLY sure you know what you're doing.
*
* Adobe Consultant: Christopher Luka
* Email: cluka@adobe.com
* 
************************************************************************************/

/******************************************************************************
 * Adobe DTM Data Layer Version 1.0
 * Created by Chris Luka, Enterprise Architect, Adobe Consulting Services
 *
 * This code provides a standardized data layer for all DTM services, along
 * with several helper routines for handling asynchronous web applications &
 * in-page activity tracking.
 *****************************************************************************/

/******************************************************************************
 * Adobe DTM Data Layer -- Initialization -- CHANGES TO CONTENT BELOW THIS 
 * POINT WILL SIGNIFICANTLY IMPACT DTM PERFORMANCE.  EDIT WITH CARE.
 *****************************************************************************/

    // Status code constants
    var _DTM_BOOTSTRAP                    = 0;
    var _DTM_PRIMARY_OBJECT_CREATED       = 1;
    var _DTM_WAITING_FOR_ASYNC_COMPLETION = 2;
    var _DTM_READY                        = 3;
    
    // Set initial status code
    var _dtm_status_code = _DTM_BOOTSTRAP;
    
    // Wait until _dtm is available, then initialize
    _dtm_bootstrap();

/******************************************************************************
* Adobe DTM Data Layer -- Functions
*****************************************************************************/

// Create primary functions & interactions
function _dtm_bootstrap(){
    
    // Create the DTM data layer subobject under _satellite (and create an alias)
    _satellite[_dtm_data_layer_key] = new Object();
    var dl = _satellite[_dtm_data_layer_key];
    
    // Now add the subsidiary objects
    dl.plugins = new Object();
    dl.async = new Object();
    dl.data = _dtm_data_object;
    dl.support = new Object();

    // Update status code
    _dtm_status_code = _DTM_PRIMARY_OBJECT_CREATED;
    
    // If this page has asynchronous behavior, let's set up the async handler
    if(_dtm_async_activity){
        
        // Let's delay calls to analytics until aynchronous elements have
        // loaded
        _dtm_status_code = _DTM_WAITING_FOR_ASYNC_COMPLETION;
        
        // Initialize the asynchronous handler
        _dtm_init_async(dl);
    }
    else{
        
        _dtm_status_code = _DTM_READY;
    }
    
    // Provide function for registering plugins
    dl.plugins.RegisterPlugin = function(plugin_name, plugin_fn){
    
        dl.plugins[plugin_name] = plugin_fn;
    };
  
    // Call the plugin registration library
    _dtm_register_plugins();
    
    // Call main loop
    _dtm_main();
}

function _dtm_init_async(dl){

    // Create asynchronous supporting objects
    dl.async.items = new Object();
    dl.async.readyState = false;
    
    // Delay the reporting handler to ensure async elements have time to
    // register
    window.setTimeout(function(){dl.async.readyState=true}, _dtm_async_delay);
    
    // This gets called to register an asynchronous activity
    dl.plugins.register_async = function(async_name){
        dl.async.items[async_name] = false;
    }
    
    // This gets called to report completion of an asynchronous activity 
    dl.plugins.report_async_complete = function(async_name){
        
        // Report the task complete
        dl.async.items[async_name] = true;
        
        // Now do a check to see if all async items have completed
        if(!dl.async.readyState){
            
            // We're not ready to check quite yet, the async registration
            // period is still open
            window.setTimeout(function(){dl.report_async_complete(async_name)},50);
        }
        else {
            
            // Registration period is closed, let's check for full completion
            var async_complete = true;
            for(var i in dl.async.items){
            if(dl.async.items.hasOwnProperty(i)){
                async_complete = async_complete && dl.async.items[i];
            }}
            if (async_complete) _dtm_status_code = _DTM_READY;
        }
    }    
}

function _dtm_data_ready(){
    
    return (_dtm_status_code == _DTM_READY) ? true : false;
}

function _dtm_main(){
    
    if(_dtm_data_ready() && _dtm_check_status()){
        
        _dtm_application();
    }
    else{
        
        window.setTimeout(_dtm_main,50);    
    }
}
